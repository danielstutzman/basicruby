/* Generated by Opal 0.7.0.dev */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$+', '$label_to_counter', '$==', '$>=', '$size', '$[]', '$===', '$-', '$!', '$private', '$each_with_index', '$[]=']);
  return (function($base, $super) {
    function $BytecodeSpool(){};
    var self = $BytecodeSpool = $klass($base, $super, 'BytecodeSpool', $BytecodeSpool);

    var def = self._proto, $scope = self._scope;

    def.breakpoint = def.num_steps_queued = def.is_done = def.counter = def.bytecodes = def.label_to_counter = nil;
    def.$initialize = function(bytecodes) {
      var self = this;

      self.bytecodes = bytecodes['$+']([["done"]]);
      self.counter = 0;
      self.label_to_counter = self.$label_to_counter(bytecodes);
      self.breakpoint = "NEXT_POSITION";
      self.num_steps_queued = 0;
      return self.is_done = false;
    };

    def.$visible_state = function() {
      var self = this;

      return $hash2(["breakpoint", "num_steps_queued", "is_done"], {"breakpoint": self.breakpoint, "num_steps_queued": self.num_steps_queued, "is_done": self.is_done});
    };

    def.$queue_run_until = function(breakpoint) {
      var self = this;

      if (self.breakpoint['$=='](breakpoint)) {
        return self.num_steps_queued = self.num_steps_queued['$+'](1)
        } else {
        self.breakpoint = breakpoint;
        return self.num_steps_queued = 1;
      };
    };

    def.$get_next_bytecode = function(is_result_truthy) {
      var $a, self = this, bytecode = nil, $case = nil;

      if (self.counter['$>='](self.bytecodes.$size())) {
        return nil
      } else if (self.num_steps_queued['$=='](0)) {
        return nil
        } else {
        bytecode = self.bytecodes['$[]'](self.counter);
        $case = bytecode['$[]'](0);if ("position"['$===']($case)) {if (self.breakpoint['$==']("NEXT_POSITION")) {
          self.num_steps_queued = self.num_steps_queued['$-'](1)}}else if ("done"['$===']($case)) {self.num_steps_queued = 0;
        self.is_done = true;}else if ("goto"['$===']($case)) {self.counter = self.label_to_counter['$[]'](bytecode['$[]'](1))}else if ("goto_if_not"['$===']($case)) {if ((($a = is_result_truthy['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.counter = self.label_to_counter['$[]'](bytecode['$[]'](1))}};
        self.counter = self.counter['$+'](1);
        return bytecode;
      };
    };

    self.$private();

    return (def.$label_to_counter = function(bytecodes) {
      var $a, $b, TMP_1, self = this, hash = nil;

      hash = $hash2([], {});
      ($a = ($b = bytecodes).$each_with_index, $a._p = (TMP_1 = function(bytecode, counter){var self = TMP_1._s || this, label_name = nil;
if (bytecode == null) bytecode = nil;if (counter == null) counter = nil;
      if (bytecode['$[]'](0)['$==']("label")) {
          label_name = bytecode['$[]'](1);
          return hash['$[]='](label_name, counter);
          } else {
          return nil
        }}, TMP_1._s = self, TMP_1), $a).call($b);
      return hash;
    }, nil) && 'label_to_counter';
  })(self, null)
})(Opal);
