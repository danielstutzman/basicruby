title: "Lambda and `->`"
level: intermediate
features: run step instructions console vars
under_construction: true
purple:
- youtube_id: rlWX5yBA2fs
  video_script: |
    Hi everyone :-)
    In this lesson, I'll demonstrate the lambda method,
      and why you might want to use it.
    On lines 1 through 4, I'm defining a method named plus1, and calling it.

    On lines 6 and 7, I'm calling the "method" method, so I can have a variable
      plus1_proc, that will contain the plus1 method.  Proc is short for
      "procedure"; it's an object that wraps up a block of code.
      (I actually could have named the variable plus1, just like the method,
        but that can get confusing.)
      So then I can run the block of code by calling the "call" method.

    Procs are useful when you want to do things like,
      the "twice" method I've defined on line 9.  "Twice" will run whatever Proc
      you give it, twice.  We'll use it to run plus1 twice, but it could any
      Proc twice.  As you see, it returns 1 + 1 + 1, which is 3.

    Lambda is a way to both define a method, and convert it to a Proc, in one step.
    It's an anonymous method, in that we can't call it, besides through the Proc.
    So instead of defining plus1 and then calling "method" to get the Proc,
      we'll just call lambda directly, and give it a block.
    It's like calling the "each" method with a block; the block starts with
      a curly brace, then we list the parameters inside pipe symbols,
      if there are any parameters,
      then whatever code we want to run, then another curly brace to end.
    Or you could start with "do" and end with "end"; either way.

    So the code works the same, with or without lambda; the advantage of lambda
      is that we can write the x + 1 exactly where we want it.
    In fact, we could even eliminate the plus1_proc variable, and put the lambda
      inside the twice method call, like this.

    For an even shorter abbreviation,
      you can write "dash greater-than parens", list whatever parameters, if any,
      "parens", then your code inside curly braces.

  code: |
    def plus1(x)
      x + 1
    end
    p plus1(1)

    plus1_proc = method(:plus1)
    p plus1_proc.call(1)

    def twice(f, x)
      f.call(f.call(x))
    end
    p twice(plus1_proc, 1)
yellow:
- code: |
    def twice(f, x)
      f.call(f.call(x))
    end
    p twice(lambda { |x| x + 1}, 1)
    p twice(->(x) { x + 1}, 1)
