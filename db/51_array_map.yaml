title: "`Array#map`"
level: intermediate
features: run step instructions console vars
under_construction: false
purple:
- youtube_id: Y2K5dvRJi0g
  video_script: |
    Hi everyone :-)
    In this lesson, we'll refactor some code to be simpler,
      by calling the map method.
    For example - here's a method named f that adds one,
      to each element of an array.
    ... (run it) ...
    So now we'll refactor this code using map.
    Just like the each method, map will run a block, once for each element.
    So first, I'll change each to map.
    ...
    Now unlike each, map pays attention to the block's return value.
    So we don't have to call push inside the block; we just return an
      expression, and map pushes each one for us.  (Demonstrate)
    ...
    Also unlike each, map itself *returns* a useful value.
    So I'll save the result to b.
    So that's how to refactor each and push, to use map instead.
    ...
    So, why use map, if it just makes you have to think about return values?
    Well, instead of taking three steps to set b to what we want,
    we can now refactor to use less code.
    We can eliminate line 2, since map creates the array for us. (Run)
    We can even eliminate the b variable altogether,
      because the last line of the method returns automatically! (Run)
    And... we can even eliminate the f method altogether! (Run)
    This style of programming can be very powerful and concise.
  
  code: |
    def f(a)
      b = []
      a.each { |x| b.push(x + 1) }
      b
    end

    a = [3, 2, 1]
    p f(a)
yellow:
- code: |
    a = [3, 2, 1]
    p a.map { |x| x + 1 }
- code: |
    a = [1, 3, 5]
    b = a.map { |x| x * 2 }
    p b
- code: |
    p [5, 4].map { |n| 7 - n }
blue:
- code: |
    x = [1, 0, 1, 0]
    y = x.map { |z| 1 - z }
    p y
  cases:
  - expected_output: "[0, 1, 0, 1]"
red:
- code: |
    a = [2, 4, 6]
    a.map { |n| n / 2 }
    p a
  solution: |
    a = [2, 4, 6]
    a = a.map { |n| n / 2 }
    p a
  cases:
  - expected_output: "[1, 2, 3]"
- code: |
    a = [6, 3, 9]
    b = a.map { |n| a.push n / 3 }
    p b
  solution: |
    a = [6, 3, 9]
    b = a.map { |n| n / 3 }
    p b
  cases:
  - expected_output: "[2, 1, 3]"
green:
- code: |
    def double(a)
      a
    end
  solution: |
    def double(a)
      a.map { |n| n * 2 }
    end
  cases:
  - code: |
      def test1
        assert_equal [2, 6, 8], double([1, 3, 4])
      end
  - code: |
      def test2
        assert_equal [0, 6, 6], double([0, 3, 3])
      end
