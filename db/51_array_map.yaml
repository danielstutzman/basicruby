title: "`Array#map`"
level: intermediate
features: run step instructions console vars
purple:
- youtube_id: null
  video_script:
    Hi everyone :-)
    In this lesson, we'll call the map method on arrays to simplify our code.
    For example - here's a method named f that takes in an array, and returns a
    new array that has one added to each element, and also appends zero to the
    end -
    ... (run it) ...
    So now we'll refactor this code using map.
    Just like the each method, map will run a block one time for each element.
    So first I'll change each to map.
    ...
    Now unlike each, map pays attention to the block's value.
    So we don't have to call push inside the block; we just write the
      expression that we're asking map to push.  (Demonstrate)
    ...
    Also unlike each, map *returns* a useful value.
    So I'll save the result to b.
    So that's how to refactor each and push, to use map instead.
    ...
    So, why use map, if it just makes you have to think about return values?
    Well, instead of taking three steps to set b to what we want,
    we can now refactor to use less code.
    We can eliminate line 2, since map creates the array for us. (Run)
    We can eliminate line 3 by changing a push call to a Plus call. (Run)
    And we can even eliminate the b variable altogether! (Run)
    We might even eliminate the f method altogether! (Run)
    ...
    This is possible when you call methods that just return values, like map,
      instead of methods that have side-effects, like each and push.
  
  code: |
    def f(a)
      b = []
      a.each { |x| b.push(x + 1) }
      b.push 0
      b
    end

    a = [3, 2, 1, 0]
    p f(a)
yellow:
- code: |
    a = [1, 3, 5]
    b = a.map { |x| x * 2 }
    p b
- code: |
    p [5, 4].map { |n| 7 - n }
red:
- code: |
    a = [2, 4, 6]
    a.map { |n| n / 2 }
    p a
  solution: |
    a = [2, 4, 6]
    a = a.map { |n| n / 2 }
    p a
  cases:
  - expected_output: "[1, 2, 3]"
- code: |
    a = [6, 3, 9]
    b = a.map { |n| a.push n / 3 }
    p b
  solution: |
    a = [6, 3, 9]
    b = a.map { |n| n / 3 }
    p b
  cases:
  - expected_output: "[2, 1, 3]"
- code: |
    a = [12, 4, 17, 8, 11]
    b = a.map { |x|
      if x >= 10
        x - 10
      end
    }
    p b
  solution: |
    a = [12, 4, 17, 8, 11]
    b = a.map { |x|
      if x >= 10
        x - 10
      end
    } - [nil]
    p b
  cases:
  - expected_output: "[2, 7, 1]"
green:
  cases:
  - code: |
      def test1
        assert_equal [2, 6, 8],
          double([1, 3, 4])
      end
  - code: |
      def test2
        assert_equal [0, 6, 6],
          double([0, 3, 3])
      end
  solution: |
    def double(a)
      a.map { |n| n * 2 }
    end
