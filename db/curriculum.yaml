- title: Output numbers and blank lines
  title_html: "Output numbers<br>and blank lines"
  features: run step instructions console
  yellow:
  - code: |
      puts 8
      puts
      puts 3
  - code: |
      puts 1
      puts 9
  - code: |
      puts
      puts 5
      puts 4
  blue:
  - code: |
      puts 6
      puts 4
    cases:
    - expected_output: |
        6
        4
  - code: |
      puts 11
      puts 1
      puts
    cases:
    - expected_output: |
        11
        1

  - code: |
      puts
      puts
      puts 1
    cases:
    - expected_output: |


        1
  red:
  - code: |
      puts 4
      ptus 2
    solution: |
      puts 4
      puts 2
    cases:
    - expected_output: |
        4
        2
  - code: |
      puts 3
      puts 4
      put5 5
    solution: |
      puts 3
      puts 4
      puts 5
    cases:
    - expected_output: |
        3
        4
        5
  - code: |
      puts 5
      puts 3
      puts 1
      puts-1
    solution: |
      puts 5
      puts 3
      puts 1
      puts -1
    cases:
    - expected_output: |
        5
        3
        1
        -1
  green:
  - solution: |
      puts
      puts 10
    cases:
    - expected_output: "\n10\n"
  - solution: |
      puts 3
      puts
      puts
    cases:
    - expected_output: "3\n\n\n"
  - solution: |
      puts 7
      puts 77
    cases:
    - expected_output: "7\n77\n"

- title: Multiple outputs sharing a line
  title_html: "Multiple outputs<br>sharing a line"
  features: run step instructions console
  yellow:
  - code: |
      print 4
      puts 5
      print 9
      puts 10
  - code: |
      print 12
      print 23
      print -456
  - code: |
      puts 1

      print 1
      puts 1

      print 1
      print 1
      print 1
      puts
  blue:
  - code: |
      puts 1
      print 2
      puts 3
    cases:
    - expected_output: |
        12
        3
  - code: |
      print 11
      print -11
      print -11
    cases:
    - expected_output: 11-11-11
  - code: |
      print 1
      puts
      print 0
    cases:
    - expected_output:
        1
        0
  red:
  - code: |
      puts 8
      print 9
      puts 10
      puts 0
      print 11
    solution: |
      print 8
      puts 9
      puts 10
      print 0
      print 11
    cases:
    - expected_output: |
        89
        10
        011
  - code: |
      print 1
      print 0.01
      puts 0.01
      puts 0.01
    solution: |
      print 1
      puts 0.01
      print 0.01
      puts 0.01
    cases:
    - expected_output: |
        10.01
        10.010.01
  - code: |
      puts 1.1
      print 1.11
      puts 1.1
      puts 1.11
    solution: |
      puts 1.1
      print 1.1
      puts 1.11
      puts 11.1
    cases:
    - expected_output: |
        1.1
        1.11.11
        11.1
  green:
  - solution: |
      puts 1
      puts -1
      print 1
      puts -1
      print -1
      puts -1
      print 1
      print -1
      puts -1
    cases:
    - expected_output: |
        1
        -1
        1-1
        -1-1
        1-1-1
  - solution: |
      print 1.1
      print -1.1
      puts -1.1
      print 1.11
      puts 1.1
      puts 1.1
    cases:
    - expected_output: |
        1.1-1.1-1.1
        1.111.1
        1.1
  - solution: |
      print 0
      print 0
      print 0
      puts 1000
      print 0
      print 0
      puts 10100
      print 0
      puts 100010
    cases:
    - expected_output: |
        0001000
        0010100
        0100010

- title: Variables
  features: run step instructions console vars
  yellow:
  - code: |
      x = 3
      y = 2
      puts x
      x = 4
      puts x
  - code: |
      x = 3
      x = 0
      puts x
      puts x
  - code: |
      y = 3
      x = 0
      puts x
      puts y
  - code: |
      x = -1
      print x
      print x
      puts x
  blue:
  - code: |
      puts 9
      x = 8
      print x
      puts x
    cases:
    - expected_output: |
        9
        88
  - code: |
      x = 2
      x = 22
      puts x
      puts 2
    cases:
    - expected_output: |
        22
        2
  - code: |
      x = 1
      y = 2
      z = 3
      puts x
      puts y
      puts y
    cases:
    - expected_output: |
        1
        2
        2
  red:
  - code: |
      x = 6
      puts x
      puts y
      y = 10
    solution: |
      x = 6
      puts x
      y = 10
      puts y
    cases:
    - expected_output: |
        6
        10
  - code: |
      x = 3
      puts x
      x = y
      puts y
    solution: |
      x = 3
      puts x
      y = x
      puts y
    cases:
    - expected_output: |
        3
        3
  - code: |
      puts 0
      z = 1
      puts 0
    solution: |
      puts 0
      z = 1
      puts z
      puts 0
    cases:
    - expected_output: |
        0
        1
        0
  green:
  - code: |
      x = 123456789
    solution: |
      x = 123456789
      puts x
      puts x
      puts x
    cases:
    - expected_output: |
        123456789
        123456789
        123456789
  - code: |
      x = -9999
    solution: |
      print 99
      x = -9999
      print x
      print x
      puts x
    cases:
    - expected_output: |
        99-9999-9999-9999
  - code: |
      x = -11
    solution: |
      x = -11
      y = -33
      print x
      puts x
      print x
      puts y
      print y
      puts x
      print y
      puts y
    cases:
    - expected_output: |
        -11-11
        -11-33
        -33-11
        -33-33

- title: Accepting input
  features: run step instructions console vars
  yellow:
  - code: |
      puts 3
      puts gets
    cases:
    - input: 5
    - input: 6
  - code: |
      y = gets
      puts gets
    cases:
    - input: "7\n2\n"
    - input: "3\n1\n"
  - code: |
      z = gets
      print 1111
      print z
      puts 1111
    cases:
    - input: 5
    - input: 2
  blue:
  - code: puts gets
    cases:
    - input: 2
      expected_output: 2
    - input: 5
      expected_output: 5
  - code: |
      y = gets
      puts 3
    cases:
    - input: 1
      expected_output: 3
    - input: 2
      expected_output: 3
  - code: |
      z = gets
      puts 9
      puts z
    cases:
    - input: 10
      expected_output: |
        9
        10
    - input: 4
      expected_output: |
        9
        4
  red:
  - code: |
      gets = x
      puts x
      puts x
    solution: |
      x = gets
      puts x
      puts x
    cases:
    - input: 5
      expected_output: |
        5
        5
    - input: 6
      expected_output: |
        6
        6
  - code: |
      x = gets
      puts 3
      puts gets
    solution: |
      x = gets
      puts 3
      puts x
    cases:
    - input: 5
      expected_output: |
        3
        5
    - input: 6
      expected_output: |
        3
        6
  - code: |
      puts 8
      puts gets
      puts 9
    solution: |
      puts 8
      gets
      puts 9
    cases:
    - input: 5
      expected_output: |
        8
        9
    - input: 6
      expected_output: |
        8
        9
  green:
  - solution: |
      x = gets
      y = gets
      puts x
    cases:
    - input: |
        2
        3
      expected_output: "2\n"
    - input: |
        8
        1
      expected_output: "8\n"
  - solution: |
      gets
      gets
      puts 5
    cases:
    - input: |
        7
        9
      expected_output: "5\n"
    - input: |
        2
        1
      expected_output: "5\n"
  - solution: |
      y = gets
      puts y
      puts y
      puts y
    cases:
    - input: "9\n"
      expected_output: "9\n9\n9\n"
    - input: "4\n"
      expected_output: "4\n4\n4\n"

#- title: Multiple arguments
#  features: run step instructions console
#  yellow:
#    assignment: |
#      You can `puts` multiple numbers at once.
#      Use commas to separate the arguments.
#      Any extra spacing or decimal places won't affect the output.
#    code: |
#      puts 0.25, 0.50,  1.00
#      puts 2.50, 5.00, 10.00
#  red:
#    assignment: Fix the commas so Run Test Case succeeds.
#    code: |
#      puts 1,
#      puts 2, 3,
#      puts, 4
#      puts 5 6
#      puts 7, , 8
#    solution: |
#      puts 1
#      puts 2, 3
#      puts 4
#      puts 5, 6
#      puts 7
#      puts
#      puts 8
#    cases:
#    - expected_output: |
#        1
#        2
#        3
#        4
#        5
#        6
#        7
#
#        8
#  green:
#    assignment: |
#      Write a one-line program to output 1 2 3.
#      Each number should be a separate line of output.
#    solution: |
#      puts 1, 2, 3
#    cases:
#    - expected_output: |
#       1
#       2
#       3

- title: Demo of advanced debugger features
  features: run step partial_calls vars instructions console tokens
  yellow:
    assignment: Demo of advanced debugger features
    code: |
      puts 3 + 4 +
        gets.to_i
    cases:
    - input: 5
      expected_output: "12\n"
    - input: 10
      expected_output: "17\n"

  #  - code: puts 7
  #  - code: |
  #      puts 9
  #      puts 1, 2
  #  - code: |
  #      puts   6
  #      puts   7
  #      #puts  8
  #      puts   9
  #      puts  10
  #      puts  11
  #      puts #12
  #  - code: |
  #      puts
  #      puts 1
  #      puts 1, 2
  #      puts 1, 2, 3
  #      
  #      puts 3, 2, 1
  #      puts    2, 1
  #      puts       1
  #      puts
