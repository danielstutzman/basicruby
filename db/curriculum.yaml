- title: Output numbers and blank lines
  title_html: "Output numbers<br>and blank lines"
  features: run step instructions console
  purple:
  - youtube_id: s_wpThTIC9k
    video_script:
      Hi everyone :-)
      In this lesson, we'll call the "put-s" method.
      "Put-s" outputs a number or a blank line.

      So the Ruby code is here at the left.
      And you'll run it by clicking Run...

      Or... by clicking Debug,
      so you can step through the program, line by line.

      Okay, your turn.
    code: |
      puts 5
      puts 4
      puts
      puts 3
  yellow:
  - code: |
      puts 8
      puts
      puts 3
  - code: |
      puts 1
      puts 9
  - code: |
      puts
      puts 5
      puts 4
  blue:
  - code: |
      puts 6
      puts 4
    cases:
    - expected_output: |
        6
        4
  - code: |
      puts 11
      puts 1
      puts
    cases:
    - expected_output: |
        11
        1

  - code: |
      puts
      puts
      puts 1
    cases:
    - expected_output: |


        1
  red:
  - code: |
      puts 4
      ptus 2
    solution: |
      puts 4
      puts 2
    cases:
    - expected_output: |
        4
        2
  - code: |
      puts 3
      puts 4
      put5 5
    solution: |
      puts 3
      puts 4
      puts 5
    cases:
    - expected_output: |
        3
        4
        5
  - code: |
      puts 5
      puts 3
      puts 1
      puts-1
    solution: |
      puts 5
      puts 3
      puts 1
      puts -1
    cases:
    - expected_output: |
        5
        3
        1
        -1
  green:
  - solution: |
      puts
      puts 10
    cases:
    - expected_output: "\n10\n"
  - solution: |
      puts 3
      puts
      puts
    cases:
    - expected_output: "3\n\n\n"
  - solution: |
      puts 7
      puts 77
    cases:
    - expected_output: "7\n77\n"

- title: Multiple outputs sharing a line
  title_html: "Multiple outputs<br>sharing a line"
  features: run step instructions console
  purple:
  - youtube_id: 6gG3v6lNwt4
    video_script:
      Hi everyone :-)
      In this lesson, we'll call the print method.
      Unlike "put-s", "print" doesn't move the cursor to the next line,
       after it outputs the number.
      So you can put multiple things on one line.
      Let's see that in the debugger.
      Line 1 prints 4, and the cursor stays on the same line.
      Line 2 is similar.
      With Line 3, the cursor does go to the next line.
      So line 4 starts at the beginning.
    code: |
      print 0
      print 3
      puts -1
      print 7
  yellow:
  - code: |
      print 4
      puts 5
      print 9
      puts 10
  - code: |
      print 12
      print 23
      print -456
  - code: |
      puts 1

      print 1
      puts 1

      print 1
      print 1
      print 1
      puts
  blue:
  - code: |
      puts 1
      print 2
      puts 3
    cases:
    - expected_output: |
        12
        3
  - code: |
      print 11
      print -11
      print -11
    cases:
    - expected_output: 11-11-11
  - code: |
      print 1
      puts
      print 0
    cases:
    - expected_output:
        1
        0
  red:
  - code: |
      puts 8
      print 9
      puts 10
      puts 0
      print 11
    solution: |
      print 8
      puts 9
      puts 10
      print 0
      print 11
    cases:
    - expected_output: |
        89
        10
        011
  - code: |
      print 1
      print 0.01
      puts 0.01
      puts 0.01
    solution: |
      print 1
      puts 0.01
      print 0.01
      puts 0.01
    cases:
    - expected_output: |
        10.01
        10.010.01
  - code: |
      puts 1.1
      print 1.11
      puts 1.1
      puts 1.11
    solution: |
      puts 1.1
      print 1.1
      puts 1.11
      puts 11.1
    cases:
    - expected_output: |
        1.1
        1.11.11
        11.1
  green:
  - solution: |
      puts 1
      puts -1
      print 1
      puts -1
      print -1
      puts -1
      print 1
      print -1
      puts -1
    cases:
    - expected_output: |
        1
        -1
        1-1
        -1-1
        1-1-1
  - solution: |
      print 1.1
      print -1.1
      puts -1.1
      print 1.11
      puts 1.1
      puts 1.1
    cases:
    - expected_output: |
        1.1-1.1-1.1
        1.111.1
        1.1
  - solution: |
      print 0
      print 0
      print 0
      puts 1000
      print 0
      print 0
      puts 10100
      print 0
      puts 100010
    cases:
    - expected_output: |
        0001000
        0010100
        0100010

- title: Variables
  features: run step instructions console vars
  purple:
  - youtube_id: GPvK2ECIpOA
    video_script:
      Hi everyone :-)
      In this lesson,
        we'll assign numbers to variables, then read them back.
      You notice the debugger now has a new section, for variables!
      So line 1 just creates a variable named x, with a value of 4.
      Line 2 changes the value of x, to 3.
      So line 3 will output the new value of x, which is 3.
      In line 4, we set the variable y to 5,
        but we never output y, so you won't see 5 in the output.
      Instead we output x again.
      Why?  So you can practice *really* looking at *details*,
        instead of guessing what a program will do.
    code: |
      x = 4
      x = 3
      puts x
      y = 5
      puts x
  yellow:
  - code: |
      z = 3
      y = 2
      puts z
      z = 4
      puts z
  - code: |
      x = 3
      x = 0
      puts x
      puts x
  - code: |
      y = 3
      x = 0
      puts x
      puts y
  - code: |
      x = -1
      print x
      print x
      puts x
  blue:
  - code: |
      puts 9
      x = 8
      print x
      puts x
    cases:
    - expected_output: |
        9
        88
  - code: |
      x = 2
      x = 22
      puts x
      puts 2
    cases:
    - expected_output: |
        22
        2
  - code: |
      x = 1
      y = 2
      z = 3
      puts x
      puts y
      puts y
    cases:
    - expected_output: |
        1
        2
        2
  red:
  - code: |
      x = 6
      puts x
      puts y
      y = 10
    solution: |
      x = 6
      puts x
      y = 10
      puts y
    cases:
    - expected_output: |
        6
        10
  - code: |
      x = 3
      puts x
      x = y
      puts y
    solution: |
      x = 3
      puts x
      y = x
      puts y
    cases:
    - expected_output: |
        3
        3
  - code: |
      puts 0
      z = 1
      puts 0
    solution: |
      puts 0
      z = 1
      puts z
      puts 0
    cases:
    - expected_output: |
        0
        1
        0
  green:
  - code: |
      x = 123456789
    solution: |
      x = 123456789
      puts x
      puts x
      puts x
    cases:
    - expected_output: |
        123456789
        123456789
        123456789
  - code: |
      x = -9999
    solution: |
      print 99
      x = -9999
      print x
      print x
      puts x
    cases:
    - expected_output: |
        99-9999-9999-9999
  - code: |
      x = -11
    solution: |
      x = -11
      y = -33
      print x
      puts x
      print x
      puts y
      print y
      puts x
      print y
      puts y
    cases:
    - expected_output: |
        -11-11
        -11-33
        -33-11
        -33-33

- title: Accepting input
  features: run step instructions console vars
  purple:
  - youtube_id: H7IPWOMPrr4
    video_script:
      Hi everyone :-)
      In this lesson, we'll call the "get-s" method,
        and whatever it returns, we'll assign to a variable.
      As the opposite of "put-s", which outputs to the screen,
        "get-s" waits for input from the keyboard.
      Let's step over line 1 and see what happens.
      Since we hit the "get-s" call, we see a blinking cursor,
        waiting for us to type something and press Enter.
      I typed in 2, so x now is 2.
      This particular program always outputs 5,
      then the value of x, which is whatever we typed in earlier.
      ...
      Now with complicated programs, it can be tedious to keep typing
        in the same input while you're getting the program to work.
      So outside the debugger, we now have test cases, with input already supplied.
      When I click Run Tests, it will run the program twice.
        First with the input 3, then with the input 4.
      (Click Run Tests).
      So we'll see one program acts two different ways,
      because the inputs are different.
    code: |
      x = gets
      puts 5
      puts x
    cases:
    - input: 3
    - input: 4
  yellow:
  - code: |
      y = 1
      z = gets
      puts z
      puts y
    cases:
    - input: 3
    - input: 9
  - code: |
      x = gets
      print x
      print 0
      print x
    cases:
    - input: 9
    - input: 7
  - code: |
      print -1
      x = gets
      puts -2
      puts x
    cases:
    - input: 0
    - input: -3
  blue:
  - code: |
      z = gets
      print 0
      puts z
    cases:
    - input: 1
      expected_output: "01"
    - input: 3
      expected_output: "03"
  - code: |
      print 1
      x = gets
      print 2
      puts x
    cases:
    - input: 5
      expected_output: 125
    - input: 6
      expected_output: 126
  - code: |
      z = gets
      puts z
      puts z
    cases:
    - input: 7
      expected_output: "7\n7\n"
    - input: 12
      expected_output: "12\n12\n"
  red:
  - code: |
      gets x
      puts x
    solution:
      x = gets
      puts x
    cases:
    - input: 1
      expected_output: 1
    - input: 8
      expected_output: 8
  - code: |
      puts 5
      gets
      puts 7
    solution:
      puts 5
      x = gets
      puts x
      puts 7
    cases:
    - input: 2
      expected_output: "5\n2\n7\n"
    - input: 5
      expected_output: "5\n5\n7\n"
  - code: |
      x = gets
      x = 1
      puts x
      puts x
    solution:
      x = gets
      puts x
      x = 1
      puts x
    cases:
    - input: 3
      expected_output: "3\n1\n"
    - input: 10
      expected_output: "10\n1\n"
  green:
  - solution: |
      x = gets
      puts x
      print 0
      puts x
    cases:
    - input: 6
      expected_output: "6\n06\n"
    - input: 2
      expected_output: "2\n02\n"
  - solution: |
      puts 0
      z = gets
      puts 1
    cases:
    - input: 6
      expected_output: "0\n1\n"
    - input: 3
      expected_output: "0\n1\n"
  - solution: |
      y = gets
      puts y
      puts 2
    cases:
    - input: 2
      expected_output: "2\n2\n"
    - input: 5
      expected_output: "5\n2\n"

- title: Multiple inputs
  features: run step instructions console vars
  purple:
  - youtube_id: omK25lAm7gM
    video_script:
      Hi everyone :-)
      This lesson is like the previous one;
      we're gonna call "get-s" to read from either the keyboard,
        or the test cases.
      But this time we can call "get-s" more than once.
      So you'll have to either type in multiple inputs,
        or the test cases will have to have multiple lines.
      Let's see an example.
      We'll read one line of input into x... one line into y.
      And then output them, in reverse order.
      Keep in mind, there's no rule saying we have to do anything with the input.
    code: |
      x = gets
      y = gets
      puts y
      puts x
    cases:
    - input: "3\n2\n"
    - input: "8\n9\n"
  yellow:
  - code: |
      x = gets
      x = gets
      puts x
      puts x
    cases:
    - input: "7\n2\n"
    - input: "3\n1\n"
  - code: |
      z = gets
      x = gets
      puts x
    cases:
    - input: "5\n1\n"
    - input: "2\n3\n"
  - code: |
      y = gets
      puts y
      puts y
      z = gets
    cases:
    - input: "5\n9\n"
    - input: "4\n3\n"
  blue:
  - code: |
      x = gets
      puts 1
      x = gets
      puts x
    cases:
    - input: 2
      expected_output: "1\n2\n"
    - input: 5
      expected_output: "1\n5\n"
  - code: |
      y = gets
      z = gets
      puts y
      print -1
      puts z
    cases:
    - input: "1\n8\n"
      expected_output: "1\n-18\n"
    - input: "2\n5\n"
      expected_output: "2\n-15\n"
  - code: |
      puts 1
      puts 10
      y = gets
      z = gets
    cases:
    - input: "3\n4\n"
      expected_output: "1\n10\n"
    - input: "10\n7\n"
      expected_output: "1\n10\n"
  red:
  - code: |
      x = gets
      x = gets
      puts x
      puts x
    solution: |
      x = gets
      puts x
      x = gets
      puts x
    cases:
    - input: "3\n5\n"
      expected_output: "3\n5\n"
    - input: "6\n1\n"
      expected_output: "6\n1\n"
  - code: |
      x = gets
      y = gets
      puts y
      puts y
    solution: |
      x = gets
      y = gets
      puts x
      puts x
    cases:
    - input: "1\n5\n"
      expected_output: "1\n1\n"
    - input: "7\n9\n"
      expected_output: "7\n7\n"
  - code: |
      puts 8
      x = gets
      x = gets
    solution: |
      puts 8
      x = gets
      puts x
      x = gets
      puts x
    cases:
    - input: 5
      expected_output: "8\n5\n5\n"
    - input: 6
      expected_output: "8\n6\n6\n"
  green:
  - solution: |
      x = gets
      y = gets
      puts x
    cases:
    - input: |
        2
        3
      expected_output: "2\n"
    - input: |
        8
        1
      expected_output: "8\n"
  - solution: |
      z = gets
      y = gets
      puts 5
    cases:
    - input: |
        7
        9
      expected_output: "5\n"
    - input: |
        2
        1
      expected_output: "5\n"
  - solution: |
      y = gets
      z = gets
      puts y
      puts y
      puts z
    cases:
    - input: "9\n4\n"
      expected_output: "9\n9\n4\n"
    - input: "4\n5\n"
      expected_output: "4\n4\n5\n"

#- title: Multiple arguments
#  features: run step instructions console
#  yellow:
#    assignment: |
#      You can `puts` multiple numbers at once.
#      Use commas to separate the arguments.
#      Any extra spacing or decimal places won't affect the output.
#    code: |
#      puts 0.25, 0.50,  1.00
#      puts 2.50, 5.00, 10.00
#  red:
#    assignment: Fix the commas so Run Test Case succeeds.
#    code: |
#      puts 1,
#      puts 2, 3,
#      puts, 4
#      puts 5 6
#      puts 7, , 8
#    solution: |
#      puts 1
#      puts 2, 3
#      puts 4
#      puts 5, 6
#      puts 7
#      puts
#      puts 8
#    cases:
#    - expected_output: |
#        1
#        2
#        3
#        4
#        5
#        6
#        7
#
#        8
#  green:
#    assignment: |
#      Write a one-line program to output 1 2 3.
#      Each number should be a separate line of output.
#    solution: |
#      puts 1, 2, 3
#    cases:
#    - expected_output: |
#       1
#       2
#       3

- title: Demo of advanced debugger features
  features: run step partial_calls vars instructions console tokens
  yellow:
    assignment: Demo of advanced debugger features
    code: |
      puts 3 + 4 +
        gets.to_i
    cases:
    - input: 5
      expected_output: "12\n"
    - input: 10
      expected_output: "17\n"

  #  - code: puts 7
  #  - code: |
  #      puts 9
  #      puts 1, 2
  #  - code: |
  #      puts   6
  #      puts   7
  #      #puts  8
  #      puts   9
  #      puts  10
  #      puts  11
  #      puts #12
  #  - code: |
  #      puts
  #      puts 1
  #      puts 1, 2
  #      puts 1, 2, 3
  #
  #      puts 3, 2, 1
  #      puts    2, 1
  #      puts       1
  #      puts
