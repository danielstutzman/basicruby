title: Array aliasing
level: intermediate
features: run step instructions console vars heap_toggle
under_construction: true
purple:
- youtube_id: ajYuXyo2PnA
  video_script: |
    Hi everyone :-)
    In this lesson, I'll demonstrate how assigning variables doesn't actually
      copy over a value; it copies over the ID of the value.
    If you don't understand this, you can accidentally link two variables
      together, so changes to one variable will affect the other!
    Let's see an example -

    So line 1 created an array containing 1 and 2.
    Line 2 might look like it copied the array.
    But, when we push 3 onto A, you see that B is affected too!
    Same with line 4; when we work with B, A gets changed too!

    However, once we make a copy of A and assign that to B,
      now when we push onto A, B will stay the same.

    Let's see it again, this time clicking "Show IDs."
    Now the variables section is split into two parts.
    On the right is the "heap", where all the values are,
      with IDs to keep track of them.
    And the left you'll see each variable and what ID it points to.
    This is show you that variables don't actually contain values;
      they actually contain an ID, which is an address to the heap.
    So we see that A currently contains the ID ___,
      which refers to the array 1 2.
    Running "b = a" on line 2 is saying "b = the ID ___".
      As you can see, there's still only one copy of the array 1 2.
    So that's why calling "push" indirectly ends up affecting both variables.

    When we run "a.clone" on line 7, it makes another copy of the array.
      Now if we stopped there, without running "b =", the copy would just sit
      on the heap, and since nothing would be pointing to it,
      it would just get garbage-collected.
    But since we ran "b = a.clone", B now contains the ID of the copy.
    So now you can see - A and B point to different IDs.
    So we can change the value of A, and this time B won't change.

  code: |
    a = [1, 2]
    b = a
    a.push 3
    b.push 4
    p b

    b = a.clone
    a.push 5
    p b
yellow:
- code: |
    a = [1, 2]
    b = a
    a.push 3
    b.push 4
    p b

    b = a.clone
    a.push 5
    p b
- code: |
    x = [9]
    x.push 10
    y = x
    x.push 11
    p y
blue:
- code: |
    a = [4, 5]
    b = a
    a = [3] + a
    a.push 6
    p b
  cases:
  - expected_output: "[4, 5]"
red:
- code: |
    x = [1, 2, 3]
    old = x
    x.push Integer gets
    p x
    x = old
    p x
  solution: |
    x = [1, 2, 3]
    old = x
    x += [Integer gets]
    p x
    x = old
    p x
  cases:
  - input: 8
    expected_output: |
      [1, 2, 3, 8]
      [1, 2, 3]
green:
- code: |
    def double(a)
    end
  solution: |
    def double(a)
      a.concat(a)
    end
  cases:
  - code: |
      def test_1
        a = [1, 2, 3]
        double a
        assert_equal [1, 2, 3, 1, 2, 3], a
      end
  - code: |
      def test_blank
        a = []
        double a
        assert_equal [], a
      end

#  - given variable, write program that changes existing array?
#    or doesn't modify it?
#  - write a method that modifies in place or doesn't?
#    add to array with push (or concat) not +?
