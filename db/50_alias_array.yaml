title: Array aliasing
level: intermediate
features: run step instructions console heap
purple:
- youtube_id: null
  video_script:
    Hi everyone :-)
    In this lesson, I'll demonstrate how variable assignment copies over the
    id of an array, not its contents.  So any changes to the array contents
    will be visible from any variable pointing to it.  Let's see it -
    So lines 1 and 2 set up a single array with two variables pointing to it.
    Calling push modifies the array in place.
    So the 3 is visible from b.
    In constrast, the plus operator does not modify the array in place;
      it creates a new copy.
    So the 4 is not visible from b.
    And there's a shorter way to write a = a + something;
      it is "a plus equals something."
      This might look like it modifies the array in place;
        but it doesn't; the "plus" makes a copy.
  code: |
    a = [1, 2]
    b = a
    a.push 3
    p b

    a = a + [4]
    a += [5]
    p b
yellow:
- code: |
    x = [9]
    x.push 10
    y = x
    x.push 11
    p y
blue:
- code: |
    a = [4, 5]
    b = a
    a = [3] + a
    a.push 6
    p b
  cases:
  - expected_output: "[4, 5]"
red:
- code: |
    x = [1, 2, 3]
    old = x
    x.push Integer gets
    p x
    x = old
    p x
  solution: |
    x = [1, 2, 3]
    old = x
    x += [Integer gets]
    p x
    x = old
    p x
  cases:
  - input: 8
    expected_output: |
      [1, 2, 3, 8]
      [1, 2, 3]

#  - given variable, write program that changes existing array?
#    or doesn't modify it?
#  - write a method that modifies in place or doesn't?
#    add to array with push (or concat) not +?
