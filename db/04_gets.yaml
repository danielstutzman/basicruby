title: Accepting input
level: beginner
features: run step instructions console vars
under_construction: false
purple:
- youtube_id: kGG78rSBrbE
  video_script:
    Hi everyone :-)
    In this lesson, we'll call the "get-s" method,
      and whatever it returns, we'll assign to a variable.
    As the opposite of "put-s", which outputs to the screen,
      "get-s" waits for input from the keyboard.
    Let's step over line 1 and see what happens.
    Since we hit the "get-s" call, we see a blinking cursor,
      waiting for us to type something and press Enter.
    I typed in 2, so x now is 2.
    This particular program always outputs 5,
    then the value of x, which is whatever we typed in earlier.
    ...
    Now with complicated programs, it can be tedious to keep typing
      in the same input while you're getting the program to work.
    So outside the debugger, we now have test cases, with input already supplied.
    When I click Run Tests, it will run the program twice.
      First with the input 3, then with the input 4.
    (Click Run Tests).
    So we'll see one program acts two different ways,
    because the inputs are different.
  code: |
    x = gets
    puts 5
    puts x
  cases:
  - input: 3
  - input: 4
yellow:
- code: |
    x = gets
    puts 5
    puts x
  cases:
  - input: 3
  - input: 4
- code: |
    y = 1
    z = gets
    puts z
    puts y
  cases:
  - input: 3
  - input: 9
- code: |
    x = gets
    print x
    print 0
    print x
  cases:
  - input: 9
  - input: 7
- code: |
    print -1
    x = gets
    puts -2
    puts x
  cases:
  - input: 0
  - input: -3
blue:
- code: |
    z = gets
    print 0
    puts z
  cases:
  - input: 1
    expected_output: "01"
  - input: 3
    expected_output: "03"
- code: |
    print 1
    x = gets
    print 2
    puts x
  cases:
  - input: 5
    expected_output: 125
  - input: 6
    expected_output: 126
- code: |
    z = gets
    puts z
    puts z
  cases:
  - input: 7
    expected_output: "7\n7\n"
  - input: 12
    expected_output: "12\n12\n"
red:
- code: |
    gets x
    puts x
  solution:
    x = gets
    puts x
  cases:
  - input: 1
    expected_output: 1
  - input: 8
    expected_output: 8
- code: |
    puts 5
    gets
    puts 7
  solution:
    puts 5
    x = gets
    puts x
    puts 7
  cases:
  - input: 2
    expected_output: "5\n2\n7\n"
  - input: 5
    expected_output: "5\n5\n7\n"
- code: |
    x = gets
    x = 1
    puts x
    puts x
  solution:
    x = gets
    puts x
    x = 1
    puts x
  cases:
  - input: 3
    expected_output: "3\n1\n"
  - input: 10
    expected_output: "10\n1\n"
green:
- solution: |
    x = gets
    puts x
    print 0
    puts x
  cases:
  - input: 6
    expected_output: "6\n06\n"
  - input: 2
    expected_output: "2\n02\n"
- solution: |
    puts 0
    z = gets
    puts 1
  cases:
  - input: 6
    expected_output: "0\n1\n"
  - input: 3
    expected_output: "0\n1\n"
- solution: |
    y = gets
    puts y
    puts 2
  cases:
  - input: 2
    expected_output: "2\n2\n"
  - input: 5
    expected_output: "5\n2\n"
