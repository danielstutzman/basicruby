title: Arithmetic with input
features: run step instructions console vars
purple:
- youtube_id: IGgTA5jFalY
  video_script:
    Hi everyone :-)
    In this lesson, we'll call the "get-s" method to get input,
      then call the "Integer" method to convert it to a number,
      then do some arithmetic and output. (Go to debug)
    ...
    So again, we start by calling both "get-s" and "Integer" in one line. (Step)
    If this syntax seems strange to you - I've written the same thing on
      line 2 with some parentheses, in case that helps.
    ...
    So next, we update the variable.
    Now, x = x + 1 would be a contradiction in algebra,
      but the Ruby equals sign means assignment,
      so it's like saying "the new x equals the old x plus one."
    ... 
    We can also do multiplication with the star operator...
    ...
    And finally we output; that way the Run Tests button
      can show something. (Click Run Tests)
  code: |
    x = Integer gets
    #   Integer(gets())
    x = x + 1
    x = x * 2
    puts x
  cases:
  - input: 3
  - input: 4
yellow:
- code: |
    y = Integer gets
    y = y * y
    puts y
  cases:
  - input: 2
  - input: 3
- code: |
    x = Integer gets
    y = Integer gets
    x = x + y
    puts x
  cases:
  - input: "6\n2\n"
  - input: "3\n1\n"
- code: |
    y = 7
    z = Integer gets
    x = y - z
    puts x
  cases:
  - input: 2
  - input: 6
blue:
- code: |
    x = Integer gets
    y = 5
    x = y - x
    puts x
  cases:
  - input: 3
    expected_output: 2
  - input: 1
    expected_output: 4
- code: |
    x = 4
    x = 3 * x
    y = Integer gets
    y = x + y
    puts y
  cases:
  - input: 2
    expected_output: 14
  - input: 1
    expected_output: 13
- code: |
    z = Integer gets
    a = Integer gets
    z = a + z
    a = z + a
    puts z
  cases:
  - input: "1\n2\n"
    expected_output: 5
  - input: "3\n1\n"
    expected_output: 5
red:
- code: |
    b = Integer gets
    b = b * 10
    b = b + b
    puts b
  solution: |
    a = Integer gets
    b = a * 10
    b = b + a
    puts b
  cases: 
  - input: 2
    expected_output: 22
  - input: 3
    expected_output: 33
- code: |
    x = Integer gets
    x = Integer gets
    y = x * x
    puts y
  solution: |
    x = Integer gets
    z = Integer gets
    y = x * z
    puts y
  cases: 
  - input: "2\n3\n"
    expected_output: 6
  - input: "3\n4\n"
    expected_output: 12
- code: |
    x = Integer gets
    y = x * 2
    puts x
  solution: |
    x = Integer gets
    y = x * 2
    puts y
  cases: 
  - input: 5
    expected_output: 10
  - input: 2
    expected_output: 4
green:
- solution: |
    x = Integer gets
    y = x + 2
    puts y
  cases:
  - input: 2
    expected_output: 4
  - input: 3
    expected_output: 5
- solution: |
    a = Integer gets
    b = Integer gets
    c = b - a
    puts c
  cases:
  - input: "4\n7\n"
    expected_output: 3
  - input: "2\n8\n"
    expected_output: 6
- solution: |
    x = Integer gets
    x = x * x
    puts x
  cases:
  - input: 2
    expected_output: 4
  - input: 3
    expected_output: 9
