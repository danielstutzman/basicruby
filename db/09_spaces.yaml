title: Spaces and strings
level: beginner
features: run step instructions console vars
purple:
- youtube_id: Tde8N4TzRTc
  video_script: |
    Hi everyone :-)
    In this lesson, we'll see that any extra spaces are ignored
    outside of double-quotes, but they're remembered inside double-quotes.
    For example, you could add an extra space before the number 1,
    just so visually the decimal point lines up with the previous line.
    Ruby doesn't care either way. 
    ...
    However, once you start a string literal with double-quotes,
    now spaces matter.  Remember a string is a sequence of letters, digits,
    or other characters, like spaces.  So you can see the spaces still exist
    in the value of z, and when we output z, they'll show up there too.
  code: |
    x = 200.00
    y =   1.00
    puts x
    puts y

    z = "  5.00"
    puts z
yellow:
- code: |
    s = " "
    puts 1
    print s
    puts 2
    print s
    print s
    puts 3
- code: |
    print " 1"
    print " 2"
    print " 3"
- code: |
    print "1 "
    print "2 "
    print "3 "
blue:
- code: |
    a = " "
    b = "4"
    print b
    print a
    puts b
  cases:
  - expected_output: "4 4"
- code: |
    z = " 1"
    puts z
    puts z
  cases:
  - expected_output: " 1\n 1\n"
- code: |
    print 0
    print "  "
    puts 0
    print " "
    print 0
    print 0
    puts " "
  cases:
  - expected_output: "0  0\n 00 \n"
red:
- code: |
    puts 1
    puts  2
    puts   3
  solution:
    puts "1"
    puts " 2"
    puts "  3"
  cases:
  - expected_output: |
      1
       2
        3
- code: |
    a = 4
    b = 5
    c = 6
    puts "a"
    puts " b"
    puts "  c"
  solution:
    a = 4
    b = 5
    c = 6
    puts a
    print " "
    puts b
    print "  "
    puts c
  cases:
  - expected_output: |
      4
       5
        6
- code: puts 1 2 3
  solution: puts "1 2 3"
  cases:
  - expected_output: "1 2 3"
green:
- solution: |
    a = gets
    print "a "
    puts a
    b = gets
    print "b "
    puts b
  cases:
  - input: "6\n1\n"
    expected_output: "a 6\nb 1\n"
  - input: "4\n9\n"
    expected_output: "a 4\nb 9\n"
- solution: |
    x = gets
    puts x
    print " "
    puts x
    print "  "
    puts x
  cases:
  - input: 2
    expected_output: |
      2
       2
        2
  - input: 9
    expected_output: |
      9
       9
        9
- solution: |
    puts "1  1"
    puts "1111"
  cases:
  - expected_output: |
      1  1
      1111
